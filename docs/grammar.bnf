// Pdef grammar in BNF with JetBrains GrammarKit support.
{
    tokens=[
        // Punctuation
        dot='.'
        colon=':'
        comma=','
        semi=';'
        less='<'
        greater='>'
        lbrace='{'
        rbrace='}'
        lparent='('
        rparent=')'

        // Attributes
        discriminator='@discriminator'
        post='@post'
        query='@query'
        throws='@throws'

        // Idd, docs and comments.
        // Dots cannot be used in definition, method, enum value, and field names.
        id='regexp:[a-zA-Z]{1}[a-zA-Z0-9_]*'
        doc='regexp:/\*\*(.|\n|\r)*?\*/'
        comment='regexp://.*'
    ]
}

File            ::= doc? Namespace Import* Definition*
Namespace       ::= 'namespace' id ('.' id)* ';'
TypeName        ::= id ('.' id)*
ModuleName      ::= id ('.' id)*

Import          ::= SingleImport | BatchImport
SingleImport    ::= 'import' ModuleName ';'
BatchImport     ::= from ModuleName 'import' ModuleName (',' ModuleName)* ';'

Definition      ::= doc? (Enum | Message | Interface)

Enum            ::= 'enum' id '{' EnumValues? '}'
EnumValues      ::= id (',' id)* ';'?

Message         ::= ('message' | 'exception') id (':' MessageBase)? '{' Field* '}'
MessageBase     ::= Type ('(' Type ')')?  // Base with an optional polymorphic type.

Field           ::= id Type FieldDiscriminator? ';'
FieldDiscriminator ::= '@discriminator'

Interface       ::= InterfaceExc? 'interface' id (':' id)? '{' Method* '}'
InterfaceExc    ::= '@throws' '(' TypeName ')'

Method          ::= doc? MethodPost? id '(' Args? ')' Type ';'
MethodPost      ::= '@post'

// @post and @query in args are deprecated since 1.2
Arg             ::= doc? id Type ('@post' | '@query')?
Args            ::= Arg (',' Arg)*

Type            ::= ValueType | ListType | SetType | MapType | TypeName
ValueType       ::= bool
                    | int16
                    | int32
                    | int64
                    | float
                    | double
                    | string
                    | datetime
                    | void
ListType        ::= list '<' Type '>'
SetType         ::= set '<' Type '>'
MapType         ::= map '<' Type ',' Type '>'
